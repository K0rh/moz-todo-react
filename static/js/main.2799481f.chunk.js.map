{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterButton.js","App.js","index.js"],"names":["Todo","props","_useState","useState","_useState2","Object","slicedToArray","isEditing","setEditing","_useState3","_useState4","newName","setNewName","editFieldRef","useRef","editButtonRef","wasEditing","value","ref","useEffect","current","usePrevious","editingTemplate","react_default","a","createElement","className","onSubmit","e","preventDefault","editTask","id","htmlFor","name","type","onChange","target","onClick","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","focus","Form","setName","addTask","autoComplete","FilterButton","aria-pressed","isPressed","setFilter","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","keys","App","tasks","setTasks","filter","updatedTasks","map","objectSpread","remainingTasks","editedTaskList","taskList","key","filterList","components_FilterButton","tasksNoun","length","headingText","concat","listHeadingRef","prevTaskLength","components_Form","newTask","nanoid","toConsumableArray","tabIndex","role","aria-labelledby","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.2799481f.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nfunction usePrevious(value) {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n    return ref.current;\r\n}\r\n\r\nexport default function Todo(props) {\r\n    const [isEditing, setEditing] = useState(false);\r\n    const [newName, setNewName] = useState('');\r\n    const editFieldRef = useRef(null);\r\n    const editButtonRef = useRef(null);\r\n\r\n    const wasEditing = usePrevious(isEditing);\r\n\r\n    function handleChange(e) {\r\n        setNewName(e.target.value);\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        props.editTask(props.id, newName);\r\n        setNewName(\"\");\r\n        setEditing(false);\r\n    }\r\n\r\n    const editingTemplate = (\r\n        <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                <label className=\"todo-label\" htmlFor={props.id}>\r\n                    New name for {props.name}\r\n                </label>\r\n                <input\r\n                    id={props.id}\r\n                    className=\"todo-text\"\r\n                    type=\"text\"\r\n                    value={newName}\r\n                    onChange={handleChange}\r\n                    ref={editFieldRef}\r\n                />\r\n            </div>\r\n            <div className=\"btn-group\">\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn todo-cancel\"\r\n                    onClick={() => setEditing(false)}\r\n                >\r\n                    Cancel\r\n                    <span className=\"visually-hidden\">renaming {props.name}</span>\r\n                </button>\r\n\r\n                <button type=\"submit\" className=\"btn btn__primary todo-edit\">\r\n                    Save\r\n                    <span className=\"visually-hidden\">new name for {props.name}</span>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n    const viewTemplate = (\r\n        <div className=\"stack-small\">\r\n            <div className=\"c-cb\">\r\n                <input\r\n                    id={props.id}\r\n                    type=\"checkbox\"\r\n                    defaultChecked={props.completed}\r\n                    onChange={() => props.toggleTaskCompleted(props.id)}\r\n                />\r\n                <label className=\"todo-label\" htmlFor={props.id}>\r\n                    {props.name}\r\n                </label>\r\n            </div>\r\n            <div className=\"btn-group\">\r\n                <button type=\"button\" className=\"btn\" onClick={() => setEditing(true)} ref={editButtonRef}>\r\n                    Edit <span className=\"visually-hidden\">{props.name}</span>\r\n                </button>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn__danger\"\r\n                    onClick={() => props.deleteTask(props.id)}\r\n                >\r\n                    Delete <span className=\"visually-hidden\">{props.name}</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (!wasEditing && isEditing) {\r\n            editFieldRef.current.focus();\r\n        }\r\n        if (wasEditing && !isEditing) {\r\n            editButtonRef.current.focus();\r\n        }\r\n    }, [wasEditing, isEditing]);\r\n\r\n    return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nfunction Form(props) {\r\n    const [name, setName] = useState('');\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (name !== \"\"){\r\n            props.addTask(name);\r\n            setName(\"\");\r\n        } \r\n    }\r\n\r\n    function handleChange(e) {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h2 className=\"label-wrapper\">\r\n                <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n                    What needs to be done?\r\n                </label>\r\n            </h2>\r\n            <input\r\n                type=\"text\"\r\n                id=\"new-todo-input\"\r\n                className=\"input input__lg\"\r\n                name=\"text\"\r\n                autoComplete=\"off\"\r\n                value={name}\r\n                onChange={handleChange}\r\n            />\r\n            <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n                Add\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nfunction FilterButton(props) {\r\n    return (\r\n        <button \r\n        type=\"button\" \r\n        className=\"btn toggle-btn\" \r\n        aria-pressed={props.isPressed}\r\n        onClick= {() => props.setFilter(props.name)}>\r\n            <span className=\"visually-hidden\">Show </span>\r\n            <span>{props.name}</span>\r\n            <span className=\"visually-hidden\"> tasks</span>\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default FilterButton;","import React, { useState, useRef, useEffect } from \"react\";\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport { nanoid } from \"nanoid\";\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: (task) => !task.completed,\n  Completed: (task) => task.completed\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n\n  function addTask(name) {\n    const newTask = { id: `todo-${nanoid()}`, name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map((task) => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task, completed: !task.completed }\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter((task) => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map((task) => {\n      if (id === task.id) {\n        return { ...task, name: newName }\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks\n    .filter(FILTER_MAP[filter])\n    .map((task) => (\n      <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        key={task.id}\n        toggleTaskCompleted={toggleTaskCompleted}\n        deleteTask={deleteTask}\n        editTask={editTask}\n      />\n    ));\n\n\n  const filterList = FILTER_NAMES.map((name) => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\n  const tasksNoun = taskList.length > 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n  const listHeadingRef = useRef(null);\n  const prevTaskLength = usePrevious(tasks.length);\n\n  useEffect(() => {\n    if (tasks.length - prevTaskLength === -1) {\n      listHeadingRef.current.focus();\n    }\n  }, [tasks.length, prevTaskLength]);\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">\n        {filterList}\n      </div>\n      <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\n        {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst DATA = [\n  { id: \"todo-0\", name: \"Eat\", completed: true },\n  { id: \"todo-1\", name: \"Sleep\", completed: false },\n  { id: \"todo-2\", name: \"Repeat\", completed: false }\n];\n\nReactDOM.render(   \n  <App tasks={DATA} /> ,\ndocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}